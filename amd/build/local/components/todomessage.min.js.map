{"version":3,"file":"todomessage.min.js","sources":["../../../src/local/components/todomessage.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Todo list reactive component.\n *\n * @module     block_todo/local/components/todomessage\n * @copyright  2023 Mikel Mart√≠n <mikel@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {todoReactive} from 'block_todo/local/todo';\n\nexport default class extends BaseComponent {\n    /**\n     * Create the todo list component.\n     */\n    create() {\n        this.name = 'todomessage';\n        this.selectors = {\n            TODOMESSAGE: `[data-for='todo-message']`,\n        };\n    }\n\n    /**\n     * Create a component instance from the mustache template.\n     *\n     * @param {string} target the DOM main element selector\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: todoReactive,\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        this._refreshTodoMessage({state});\n    }\n\n    /**\n     * Define the component watchers.\n     *\n     * @returns {Array} the list of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `todos:updated`, handler: this._refreshTodoMessage},\n            {watch: `todos:deleted`, handler: this._refreshTodoMessage},\n            {watch: `todos:created`, handler: this._refreshTodoMessage},\n        ];\n    }\n\n    /**\n     * Refresh the todo element.\n     *\n     * @param {object} param the watcher param\n     * @param {object} param.state the state\n     */\n    _refreshTodoMessage({state}) {\n        // TODO: Better way to do this?\n        const todosLeft = [...state.todos].filter(todo => !todo[1].done) ?? [];\n        // TODO: Get the strings from the language pack.\n        const messageContainer = this.getElement(this.selectors.TODOMESSAGE);\n        if (todosLeft.length > 1) {\n            messageContainer.innerHTML = 'Still a lot to do üòÖ';\n        } else if (todosLeft.length === 1) {\n            messageContainer.innerHTML = 'You are almost there! üèÅ';\n        } else {\n            messageContainer.innerHTML = 'Nothing left. Time to relax üèñÔ∏è';\n        }\n    }\n}\n"],"names":["BaseComponent","create","name","selectors","TODOMESSAGE","target","this","element","document","querySelector","reactive","todoReactive","stateReady","state","_refreshTodoMessage","getWatchers","watch","handler","todosLeft","todos","filter","todo","done","messageContainer","getElement","length","innerHTML"],"mappings":";;;;;;;;uBA0B6BA,wBAIzBC,cACSC,KAAO,mBACPC,UAAY,CACbC,qDAWIC,OAAQF,kBACT,IAAIG,KAAK,CACZC,QAASC,SAASC,cAAcJ,QAChCK,SAAUC,mBACVR,UAAAA,YASRS,WAAWC,YACFC,oBAAoB,CAACD,MAAAA,QAQ9BE,oBACW,CACH,CAACC,sBAAwBC,QAASX,KAAKQ,qBACvC,CAACE,sBAAwBC,QAASX,KAAKQ,qBACvC,CAACE,sBAAwBC,QAASX,KAAKQ,sBAU/CA,0CAAoBD,MAACA,kBAEXK,0BAAY,IAAIL,MAAMM,OAAOC,QAAOC,OAASA,KAAK,GAAGC,kCAAS,GAE9DC,iBAAmBjB,KAAKkB,WAAWlB,KAAKH,UAAUC,aACpDc,UAAUO,OAAS,EACnBF,iBAAiBG,UAAY,uBACD,IAArBR,UAAUO,OACjBF,iBAAiBG,UAAY,2BAE7BH,iBAAiBG,UAAY"}